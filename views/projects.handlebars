
<!-- page main content -->
<div class="container-fluid">
    <div class="row">

        <!-- main content -->
        <main role="main" class="col-md-9 ml-sm-5 col-lg-10 pt-3 px-4">
            <body data-spy="scroll" data-target="#toc">
                <div id="experiences">
                    <br>
                    <!-- popularify -->
                    <hr>
                    <div class="experiences">
                        <div class="experience row">
                            <div class="col-md-4">
                                <h4><a href="/popularify">popularify</a></h4>
                                <p class="experience-period">
                                    <ul>
                                        <li>Spotify API Javascript AJAX requests</li>
                                        <li>Spotify API Auth Grant Flow</li>
                                        <li>Python Spotify API</li>
                                        <li>Displaying large amounts of data on a page</li>
                                        <li>Spotify API create playlist / add tracks</li>
                                    </ul>
                                </p>
                            </div>
                            <div class="col-md-8">
                                <p>
                                    <span class="hidden-phone">
                                        This website organizes a Spotify artist's entire discography in order of
                                        popularity. The user can request this sorted list of data without needing to log
                                        in to spotify. If they want to, the user can log in on popularify and save the
                                        organized data to a new spotify playlist on their account.
                                    </span>

                                </p>
                            </div>
                        </div>
                    </div>

                    <!-- songsweeper -->
                    <hr>
                    <div class="experiences">
                        <div class="experience row">
                            <div class="col-md-4">
                                <h4><a href="/songsweeper">songsweeper</a></h4>
                                <p class="experience-period">
                                    <ul>
                                        <li>Django</li>
                                        <li>Full Auth Flow (Login, Register, Reset Password, Email Verification)</li>
                                        <li>PostgreSQL</li>
                                        <li>AJAX HTTP</li>
                                        <li>Android Application</li>
                                        <li>Chrome Extension</li>
                                        <li>Asynchronous Javascript</li>
                                    </ul>
                                </p>
                            </div>
                            <div class="col-md-8">
                                <p>
                                    <span class="hidden-phone">
                                        This project is the result of my frustration with the current state of music
                                        listening history analysis. As someone who listens to music on YouTube, Spotify,
                                        Soundcloud, and my own files on both mobile and desktop, sometimes all in the
                                        same day, I'm sad that there's no way to track my listening data between these
                                        platforms. Since competing streaming services like Spotify and YouTube would
                                        never share data between each other, I wanted to see what a 3rd-party listening
                                        history tracker would look like. So I made a website / android app / chrome
                                        extension to track your listening history across all platforms on both mobile
                                        and browser devices. In its current state you can track, <br> Currently this
                                        project works in its most simplest form, but I plan on adding much more. I want
                                        to get the user experience as convenient as possible, and to make this into
                                        something that I would actually use. To do so I'm going to need to offer enough
                                        of a service that justifies the installation / managing / user of my project. So
                                        I'm going to continuously be working on making this as easy and simple and
                                        convenient to use as much as I can.

                                    </span>
                                    <br> <a href="https://github.com/MartinBarker/repoNotPublicYet">Github (TBD)</a>
                                </p>
                            </div>
                        </div>
                    </div>

                    <!-- commandLineMusicVideo -->
                    <hr>
                    <div class="experiences">
                        <div class="experience row">
                            <div class="col-md-4">
                                <h4><a
                                        href="https://github.com/MartinBarker/commandLineMusicVideo">commandLineMusicVideo</a>
                                </h4>
                                <p class="experience-period">
                                    <ul>
                                        <li>Python3 Pip Package</li>
                                        <li>ffmpeg</li>
                                        <li>Video Rendering</li>
                                    </ul>
                                </p>
                            </div>
                            <div class="col-md-8">
                                <p>
                                    <span class="hidden-phone">
                                        This Python3 pip package renders music videos using ffmpeg all from the terminal
                                        command line. commandLineMusicVideo is another addition to my work in making the
                                        experience of rendering and uploading music to YouTube as simple, easy,
                                        open-source, fast, and free as possible.
                                    </span>
                                    <br> <a href="https://github.com/MartinBarker/commandLineMusicVideo">Github</a>
                                </p>
                            </div>
                        </div>
                    </div>

                    <!-- commandLineMusicVideo -->
                    <hr>
                    <div class="experiences">
                        <div class="experience row">
                            <div class="col-md-4">
                                <h4><a href="https://github.com/MartinBarker/vinyl2digital">vinyl2digital</a></h4>
                                <p class="experience-period">
                                    <ul>
                                        <li>Python3 Pip Package</li>
                                        <li>Audacity mod-script-pipe connection</li>
                                        <li>Audio Exporting</li>
                                        <li>Metadata Tagging</li>
                                    </ul>
                                </p>
                            </div>
                            <div class="col-md-8">
                                <p>
                                    <span class="hidden-phone">
                                        This is a Python3 pip package that connencts to Audacity's mod-script-pipe for
                                        Python scripting, it can batch render each selection of an Audacity track to mp3
                                        files with metadata tags based on a Discogs URL. vinyl2digital makes digitizing
                                        vinyl records much easier and faster.
                                    </span>
                                    <br> <a href="https://github.com/MartinBarker/vinyl2digital">Github</a>
                                </p>
                            </div>
                        </div>
                    </div>

                    <!-- tagger -->
                    <hr>
                    <div class="experiences">
                        <div class="experience row">
                            <div class="col-md-4">
                                <h4><a href="http://tagger.site">tagger.site</a></h4>
                                <p class="experience-period">
                                    <ul>
                                        <li>HTML5 / CSS</li>
                                        <li>Asynchronous Javascript</li>
                                        <li>Audio File Header Metadata</li>
                                    </ul>
                                </p>
                            </div>
                            <div class="col-md-8">
                                <p>
                                    <span class="hidden-phone">A website that uses Javascript to read header metadata
                                        from audio
                                        files and generates a tracklisted timestamp.Before this website, the only way to
                                        create
                                        these tracklisted timestamps for full album YouTube uploads was to manually
                                        calculate the
                                        tracklengths. A time-consuming task that music-uploaders have been stuck with
                                        forever,
                                        before tagger.site. </span>
                                    <br> <a href="https://github.com/MartinBarker/martinbarker.me">Github</a>
                                </p>
                            </div>
                        </div>
                    </div>

                    <!-- bashAlbumExporter -->
                    <hr>
                    <div class="experiences">
                        <div class="experience row">
                            <div class="col-md-4">
                                <h4><a href="https://github.com/MartinBarker/bashAlbumExporter">bashAlbumExporter</a>
                                </h4>
                                <p class="experience-period">
                                    <ul>
                                        <li>Bash Script</li>
                                        <li>ffmpeg</li>
                                        <li>Audio / Video Codecs</li>
                                        <li>Video Rendering</li>
                                    </ul>
                                </p>
                            </div>
                            <div class="col-md-8">
                                <p>
                                    <span class="hidden-phone">
                                        This bash script uses ffmpeg to turn audio files (mp3 / flac) and an image into
                                        mp4 videos you can upload to YouTube. I use this script for all my YouTube video
                                        uploads as it is easier, faster, and free compared to other video rendering
                                        software such as Sony Vegas / Adobe.

                                    </span>
                                    <br> <a href="https://github.com/MartinBarker/bashAlbumExporter">Github</a>
                                </p>
                            </div>
                        </div>
                    </div>

                    <!-- discogstagger -->
                    <hr>
                    <div class="experiences">
                        <div class="experience row">
                            <div class="col-md-4">
                                <h4><a href="http://www.discogstagger.site">discogstagger.site</a></h4>
                                <p class="experience-period">
                                    <ul>
                                        <li>HTML5 / CSS</li>
                                        <li>Asynchronous Javascript</li>
                                        <li>Discogs API</li>
                                    </ul>
                                </p>
                            </div>
                            <div class="col-md-8">
                                <p>
                                    <span class="hidden-phone">
                                        A website which uses the <a
                                            href="https://www.discogs.com/developers/">discogs-api</a> to
                                        generate comma separated metadata tags based on a discogs release URL. Before
                                        this website,
                                        if you wanted a list of tags to put in a YouTube video, you would have to write
                                        them by
                                        hand. This site simplifies the process for music uploaders by generating a list
                                        of tags
                                        based on a release's info, artists / aliases, tracklist, and more. The info is
                                        displayed
                                        allowing for users to adjust how much of each category they want in their tags.
                                    </span>
                                    <br> <a href="https://github.com/MartinBarker/martinbarker.me">Github</a>
                                </p>
                            </div>
                        </div>
                    </div>

                    <!-- KEXP Playlist -->
                    <hr>
                    <div class="experiences">
                        <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
                        <div class="experience row">
                            <div class="col-md-4">
                                <h4><a href='https://kexpplaylist.herokuapp.com/playlist/'>KEXP Playlist</a></h4>
                                <p class="experience-period">
                                    <ul>
                                        <li>Django</li>
                                        <li>PostgreSQL</li>
                                        <li>KEXP API</li>
                                    </ul>
                                </p>
                            </div>
                            <div class="col-md-8">
                                <p>
                                    <span class="hidden-phone"> A Django website that posts the last hour of music
                                        played on
                                        Seattle's radio station <a href="https://www.kexp.org/">KEXP 90.3 FM</a> using
                                        the station's
                                        <a href='https://legacy-api.kexp.org/#!/host/host_list'>API</a>, and organizes
                                        the plays in
                                        a table with a form for users to store / edit comments in a PostgreSQL database.
                                        This project was to get practice using another music source's API for storing
                                        plays in an
                                        organized fashion.</span>
                                    <br><strong>NOTE: Hosted for free on Heroku, website may take 3 minutes to
                                        load.</strong>
                                    <br> <a href="https://github.com/MartinBarker/kexp_playlist">Github</a>
                                </p>
                            </div>
                        </div>
                    </div>

                    <!-- VLC-Radio -->
                    <hr>
                    <div class="experiences">
                        <div class="experience row">
                            <div class="col-md-4">
                                <h4><a href="https://github.com/MartinBarker/VLC-Radio">VLC-Radio</a></h4>
                                <p class="experience-period">
                                    <ul>
                                        <li>Python 3</li>
                                        <li>PyPi Package</li>
                                        <li>Command Line Interface</li>
                                        <li>Audio Metadata Exporter</li>
                                        <li>VLC Media Player</li>
                                    </ul>
                                </p>
                            </div>
                            <div class="col-md-8">
                                <p>
                                    <span class="hidden-phone">
                                        A Python package that pulls song metadata and albumart from VLC media player,
                                        and saves it to a desired location. Intended to make the process of displaying
                                        what's currently-playing easier for streamers. This script is primarily useful
                                        for <a href="https://youtu.be/ZGelFeesR-M?t=13821">automated radio streams on
                                            YouTube</a>.
                                    </span>
                                    <br> <a href="https://github.com/MartinBarker/VLC-Radio">Github</a>
                                </p>
                            </div>
                        </div>
                    </div>

                    <!-- VLC-Randomizer -->
                    <hr>
                    <div class="experiences">
                        <div class="experience row">
                            <div class="col-md-4">
                                <h4><a
                                        href="https://github.com/MartinBarker/VLC-Playlist-Randomizer">VLC-Playlist-Randomizer</a>
                                </h4>
                                <p class="experience-period">
                                    <ul>
                                        <li>Python 3</li>
                                        <li>PyPi Package</li>
                                        <li>Command Line Interface</li>
                                        <li>VLC Media Player</li>
                                    </ul>
                                </p>
                            </div>
                            <div class="col-md-8">
                                <p>
                                    <span class="hidden-phone">
                                        A Python program to randomize a VLC playlist .xspf file. VLC's built in
                                        random-feature jumps around and doesn't shuffle all too well. I built this
                                        script so I could generate unique playlists for large amounts of songs to play
                                        with my VLC-Radio project.
                                    </span>
                                    <br> <a href="https://github.com/MartinBarker/VLC-Playlist-Randomizer">Github</a>
                                </p>
                            </div>
                        </div>
                    </div>


                </div>
            </body>
        </main>

    </div>
</div>