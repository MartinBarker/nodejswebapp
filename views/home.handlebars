
<!-- page main content -->
<div class="container-fluid">
    <div class="row">

        <!-- main content -->
        <main role="main" class="col-md-9 ml-sm-5 col-lg-10 pt-3 px-4">
            
			<body data-spy="scroll" data-target="#toc">
			    <div class="background-white">
			        <div id="profile">
			            <h1>Martin Barker</h1>
			            <p class="lead">Full-Stack Software Developer</p>
			            <a href="/static/assets/pdf/Martin Barker Resume 2020.pdf">Resume </a>
			            <hr>
			            <div class="row">

			                <div class="col-md-4">
			                    <h5>About me</h5>
			                    <p>
			                        In 2019 I graduated from OSU with a BS in Applied Computer Science (Cybersecurity), and am
			                        currently living in
			                        Seattle,
			                        WA. I am also a
			                        <a href="https://mixcloud.com/martinradio/">DJ</a> who uploads rare records <a
			                            href="http://www.martinradio.com">online</a>, and creates music-related
			                        software <a href="http://martinbarker.me/projects">projects</a> that benefit the
			                        online music community.
			                </div>

			                <div class="col-md-4 text-center">
			                    <img id='facePic' src="/static/assets/img/headshot.jpg" width="246" height="246">
			                </div>

			                <div id='detailsDiv' class="col-md-4">
			                    <h5>Details</h5>

			                    <p>
			                        <strong>Name:</strong><br>
			                        Martin Anthony Barker<br>
			                        <strong>Age:</strong><br>
			                        22 years<br>
			                        <strong>Location:</strong><br>
			                        Seattle, WA </p>

			                </div>

			                <style>
			                    #detailsDiv {
			                        overflow: auto;

			                        /* padding-left: 100px; */
			                    }
			                </style>

			            </div>

			            <div class="text-center">

			            </div>
			        </div>
			    </div>



			    <div id="experiences">

			        <hr>

			        <h6>Education</h6>

			        <div class="experiences">
			            <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">

			            <div class="experience row">
			                <div class="col-md-4">
			                    <h4>Oregon State University</h4>
			                    <p class="experience-period">
			                        September 2015 -
			                        July 2019 </p>
			                </div>
			                <div class="col-md-8">
			                    <p>
			                        <strong>Bachelor - Applied Computer Science (Focus: Cybersecurity)</strong>
			                        <span class="hidden-phone">
			                            My applied CS degree gave me the unique perspective of software development
			                            from a
			                            cybersecurity view. My courses included programming in languages such as
			                            Python, C++, C, as
			                            well as bash and linux command line experience. I also took courses on web
			                            devlopment using
			                            NodeJS, HTML, CSS, Javascript, and Django. As well as database setup /
			                            management with SQL
			                            and PostgreSQL. My cybersecurity courses taught me computer networking
			                            protocols and
			                            security, as well as threat detection / response. </span>
			                        <span class="experience-details">
			                            <span class="location">
			                                <i class="material-icons">place</i> Corvallis, OR </span>

			                        </span>
			                    </p>
			                </div>
			            </div>



			        </div>
			        <hr>
			        <h6>Careers</h6>
			        <div class="experiences">
			            <!-- Zume, Inc -->
			            <div class="experience row">
			                <div class="col-md-4">
			                    <h4>Zume, Inc</h4>
			                    <p class="experience-period"> 
			                        September 2019 - January 2020</p>
			                </div>
			                <div class="col-md-8">
			                    <p>
			                        <strong>DevOps Engineer (Software Engineer I)</strong>
			                        <span class="hidden-phone">
			                            Working at Zume before the Seattle office was laid off, I was able to get hands on experience with the full Devops pipeline of code deployment from a local environment to the production clusters. I created Kubernetes clusters from scratch in Google Cloud Platform (GCP), and installed Helm as well as ingress load balancers. I also wrote my own Helm charts and Dockerfiles, as well as created webhooks to trigger the Docker image build process in Jenkins. This process of installing services to different cluster environments (dev / perf / staging / prod) was automated by Spinnaker pipelines that I also wrote. I carried a security mindset throughout all my work, setting up alert monitoring and handling cluster authorization. 
			                        </span>
			                        <span class="experience-details">
			                            <span class="location">
			                                <i class="material-icons">place</i> Seattle, WA </span>
			                            <span class="seperator">|</span>
			                            <span class="link">
			                                <a href="https://www.zume.com" target="_blank">Zume, Inc</a>
			                            </span>
			                        </span>
			                    </p>
			                </div>
			            </div>
			            <!-- moxiworks -->
			            <div class="experience row">
			                <div class="col-md-4">
			                    <h4>MoxiWorks</h4>
			                    <p class="experience-period">
			                        June 2018 - August 2019</p>
			                </div>
			                <div class="col-md-8">
			                    <p>
			                        <strong>Fulltime - Quality Assurance Engineer</strong>
			                        <span class="hidden-phone">
			                            MoxiWorks is an expanding real estate tech startup located in Pioneer
			                            Square. As a QA
			                            engineer I write automated testing software in Java to cover the Moxi suite
			                            of web products
			                            as well as their external API. Our workflow uses agile development and
			                            sprints to push out
			                            new features, as well as git to maintain the shared repo we all work in.
			                            This position has
			                            helped strengthen my programming habits for writing scalable code meant to
			                            be reused /
			                            revisited by different people for years to come. It's also given me more
			                            experience
			                            communicating with a team through daily standup meetings. </span>
			                        <span class="experience-details">
			                            <span class="location">
			                                <i class="material-icons">place</i> Seattle, WA </span>
			                            <span class="seperator">|</span>
			                            <span class="link">
			                                <a href="https://www.moxiworks.com" target="_blank">moxiworks.com</a>
			                            </span>
			                        </span>
			                    </p>
			                </div>
			            </div>
			            <!-- kbvr -->
			            <div class="experience row">
			                <div class="col-md-4">
			                    <h4>KBVR FM / TV</h4>
			                    <p class="experience-period">
			                        September 2016 -
			                        April 2018 </p>
			                </div>
			                <div class="col-md-8">
			                    <p>
			                        <strong>Fulltime - Student Engineer</strong>
			                        <span class="hidden-phone">
			                            At Orange Media Network I worked as student engineer for OSU's TV / Radio
			                            station KBVR FM /
			                            TV. I was in charge of learning and teaching state-of-the-art media software
			                            / hardware used
			                            in our daily TV productions and radio broadcasts. I ran audio for
			                            on-location OSU football
			                            broadcasts, and was sent to the National Association of Broadcasters
			                            convention in Las Vegas
			                            by my college in 2015 / 2016. The position helped me gain experience in
			                            learning new tech
			                            outside my comfort zone, and teaching that technology to students in an
			                            understandable way
			                            devoid of technical jargon.</span>
			                        <span class="experience-details">
			                            <span class="location">
			                                <i class="material-icons">place</i> Corvallis, OR </span>
			                            <span class="seperator">|</span>
			                            <span class="link">
			                                <a href="http://www.orangemedianetwork.com" target="_blank">orangemedianetwork.com</a>
			                            </span>
			                        </span>
			                    </p>
			                </div>
			            </div>
			        </div>
			    </div>
			    <hr>
			    <div id="experiences">
			        <h6><a href="/projects">Projects</a></h6>

			        <!-- popularify -->
			        <hr>
			        <div class="experiences">
			            <div class="experience row">
			                <div class="col-md-4">
			                    <h4><a href="/popularify">popularify</a></h4>
			                    <p class="experience-period">
			                        <ul>
			                            <li>Spotify API Javascript AJAX requests</li>
			                            <li>Spotify API Auth Grant Flow</li>
			                            <li>Python Spotify API</li>
			                            <li>Displaying large amounts of data on a page</li>
			                            <li>Spotify API create playlist / add tracks</li>
			                        </ul>
			                    </p>
			                </div>
			                <div class="col-md-8">
			                    <p>
			                        <span class="hidden-phone">
			                            This website organizes a Spotify artist's entire discography in order of popularity. The
			                            user can request this sorted list of data without needing to log in to spotify. If they want
			                            to, the user can log in on popularify and save the organized data to a new spotify playlist
			                            on their account.
			                        </span>

			                    </p>
			                </div>
			            </div>
			        </div>

			        <!-- songsweeper -->
			        <hr>
			        <div class="experiences">
			            <div class="experience row">
			                <div class="col-md-4">
			                    <h4><a href="/songsweeper">songsweeper</a></h4>
			                    <p class="experience-period">
			                        <ul>
			                            <li>Django</li>
			                            <li>Full Auth Flow (Login, Register, Reset Password, Email Verification)</li>
			                            <li>PostgreSQL</li>
			                            <li>AJAX HTTP</li>
			                            <li>Android Application</li>
			                            <li>Chrome Extension</li>
			                            <li>Asynchronous Javascript</li>
			                        </ul>
			                    </p>
			                </div>
			                <div class="col-md-8">
			                    <p>
			                        <span class="hidden-phone">
			                            This project is the result of my frustration with the current state of music listening
			                            history analysis. As someone who listens to music on YouTube, Spotify, Soundcloud, and my
			                            own files on both mobile and desktop, sometimes all in the same day, I'm sad that there's no
			                            way to track my listening data between these platforms. Since competing streaming services
			                            like Spotify and YouTube would never share data between each other, I wanted to see what a
			                            3rd-party listening history tracker would look like. So I made a website / android app /
			                            chrome extension to track your listening history across all platforms on both mobile and
			                            browser devices. In its current state you can track, <br> Currently this project works in
			                            its most simplest form, but I plan on adding much more. I want to get the user experience as
			                            convenient as possible, and to make this into something that I would actually use. To do so
			                            I'm going to need to offer enough of a service that justifies the installation / managing /
			                            user of my project. So I'm going to continuously be working on making this as easy and
			                            simple and convenient to use as much as I can.

			                        </span>
			                        <br> <a href="https://github.com/MartinBarker/repoNotPublicYet">Github (TBD)</a>
			                    </p>
			                </div>
			            </div>
			        </div>

			        <!-- commandLineMusicVideo -->
			        <hr>
			        <div class="experiences">
			            <div class="experience row">
			                <div class="col-md-4">
			                    <h4><a href="https://github.com/MartinBarker/vinyl2digital">vinyl2digital</a></h4>
			                    <p class="experience-period">
			                        <ul>
			                            <li>Python3 Pip Package</li>
			                            <li>Audacity mod-script-pipe connection</li>
			                            <li>Audio Exporting</li>
			                            <li>Metadata Tagging</li>
			                        </ul>
			                    </p>
			                </div>
			                <div class="col-md-8">
			                    <p>
			                        <span class="hidden-phone">
			                            This is a Python3 pip package that connencts to Audacity's mod-script-pipe for Python scripting, it can batch render each selection of an Audacity track to mp3 files with metadata tags based on a Discogs URL. vinyl2digital makes digitizing vinyl records much easier and faster.
			                        </span>
			                        <br> <a href="https://github.com/MartinBarker/vinyl2digital">Github</a>
			                    </p>
			                </div>
			            </div>
			        </div>

			        <!-- vinyl2digital -->
			        <hr>
			        <div class="experiences">
			            <div class="experience row">
			                <div class="col-md-4">
			                    <h4><a href="https://github.com/MartinBarker/commandLineMusicVideo">commandLineMusicVideo</a></h4>
			                    <p class="experience-period">
			                        <ul>
			                            <li>Python3 Pip Package</li>
			                            <li>ffmpeg</li>
			                            <li>Video Rendering</li>
			                        </ul>
			                    </p>
			                </div>
			                <div class="col-md-8">
			                    <p>
			                        <span class="hidden-phone">
			                            This Python3 pip package renders music videos using ffmpeg all from the terminal command line. commandLineMusicVideo is another addition to my work in making the experience of rendering and uploading music to YouTube as simple, easy, open-source, fast, and free as possible. 
			                        </span>
			                        <br> <a href="https://github.com/MartinBarker/commandLineMusicVideo">Github</a>
			                    </p>
			                </div>
			            </div>
			        </div>

			        <!-- tagger -->
			        <hr>
			        <div class="experiences">
			            <div class="experience row">
			                <div class="col-md-4">
			                    <h4><a href="http://tagger.site">tagger.site</a></h4>
			                    <p class="experience-period">
			                        <ul>
			                            <li>HTML5 / CSS</li>
			                            <li>Asynchronous Javascript</li>
			                            <li>Audio File Header Metadata</li>
			                        </ul>
			                    </p>
			                </div>
			                <div class="col-md-8">
			                    <p>
			                        <span class="hidden-phone">A website that uses Javascript to read header metadata from audio
			                            files and generates a tracklisted timestamp.Before this website, the only way to create
			                            these tracklisted timestamps for full album YouTube uploads was to manually calculate the
			                            tracklengths. A time-consuming task that music-uploaders have been stuck with forever,
			                            before tagger.site. </span>
			                        <br> <a href="https://github.com/MartinBarker/martinbarker.me">Github</a>
			                    </p>
			                </div>
			            </div>
			        </div>

			        <!-- discogstagger -->
			        <hr>
			        <div class="experiences">
			            <div class="experience row">
			                <div class="col-md-4">
			                    <h4><a href="http://www.discogstagger.site">discogstagger.site</a></h4>
			                    <p class="experience-period">
			                        <ul>
			                            <li>HTML5 / CSS</li>
			                            <li>Asynchronous Javascript</li>
			                            <li>Discogs API</li>
			                        </ul>
			                    </p>
			                </div>
			                <div class="col-md-8">
			                    <p>
			                        <span class="hidden-phone">
			                            A website which uses the <a href="https://www.discogs.com/developers/">discogs-api</a> to
			                            generate comma separated metadata tags based on a discogs release URL. Before this website,
			                            if you wanted a list of tags to put in a YouTube video, you would have to write them by
			                            hand. This site simplifies the process for music uploaders by generating a list of tags
			                            based on a release's info, artists / aliases, tracklist, and more. The info is displayed
			                            allowing for users to adjust how much of each category they want in their tags.
			                        </span>
			                        <br> <a href="https://github.com/MartinBarker/martinbarker.me">Github</a>
			                    </p>
			                </div>
			            </div>
			        </div>

			        <!-- KEXP Playlist -->
			        <hr>
			        <div class="experiences">
			            <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
			            <div class="experience row">
			                <div class="col-md-4">
			                    <h4><a href='https://kexpplaylist.herokuapp.com/playlist/'>KEXP Playlist</a></h4>
			                    <p class="experience-period">
			                        <ul>
			                            <li>Django</li>
			                            <li>PostgreSQL</li>
			                            <li>KEXP API</li>
			                        </ul>
			                    </p>
			                </div>
			                <div class="col-md-8">
			                    <p>
			                        <span class="hidden-phone"> A Django website that posts the last hour of music played on
			                            Seattle's radio station <a href="https://www.kexp.org/">KEXP 90.3 FM</a> using the station's
			                            <a href='https://legacy-api.kexp.org/#!/host/host_list'>API</a>, and organizes the plays in
			                            a table with a form for users to store / edit comments in a PostgreSQL database.
			                            This project was to get practice using another music source's API for storing plays in an
			                            organized fashion.</span>
			                        <br><strong>NOTE: Hosted for free on Heroku, website may take 3 minutes to load.</strong>
			                        <br> <a href="https://github.com/MartinBarker/kexp_playlist">Github</a>
			                    </p>
			                </div>
			            </div>
			        </div>

			        <!-- bashAlbumExporter -->
			        <hr>
			        <div class="experiences">
			            <div class="experience row">
			                <div class="col-md-4">
			                    <h4><a href="https://github.com/MartinBarker/bashAlbumExporter">bashAlbumExporter</a></h4>
			                    <p class="experience-period">
			                        <ul>
			                            <li>Bash Script</li>
			                            <li>ffmpeg</li>
			                            <li>Audio / Video Codecs</li>
			                            <li>Video Rendering</li>
			                        </ul>
			                    </p>
			                </div>
			                <div class="col-md-8">
			                    <p>
			                        <span class="hidden-phone">
			                            This bash script uses ffmpeg to turn audio files (mp3 / flac) and an image into mp4 videos
			                            you can upload to YouTube. I use this script for all my YouTube video uploads as it is
			                            easier, faster, and free compared to other video rendering software such as Sony Vegas /
			                            Adobe.

			                        </span>
			                        <br> <a href="https://github.com/MartinBarker/bashAlbumExporter">Github</a>
			                    </p>
			                </div>
			            </div>
			        </div>

			        <!-- VLC-Radio -->
			        <hr>
			        <div class="experiences">
			            <div class="experience row">
			                <div class="col-md-4">
			                    <h4><a href="https://github.com/MartinBarker/VLC-Radio">VLC-Radio</a></h4>
			                    <p class="experience-period">
			                        <ul>
			                            <li>Python 3</li>
			                            <li>PyPi Package</li>
			                            <li>Command Line Interface</li>
			                            <li>Audio Metadata Exporter</li>
			                            <li>VLC Media Player</li>
			                        </ul>
			                    </p>
			                </div>
			                <div class="col-md-8">
			                    <p>
			                        <span class="hidden-phone">
			                            A Python package that pulls song metadata and albumart from VLC media player, and saves it
			                            to a desired location. Intended to make the process of displaying what's currently-playing
			                            easier for streamers. This script is primarily useful for <a
			                                href="https://youtu.be/ZGelFeesR-M?t=13821">automated radio streams on YouTube</a>.
			                        </span>
			                        <br> <a href="https://github.com/MartinBarker/VLC-Radio">Github</a>
			                    </p>
			                </div>
			            </div>
			        </div>

			        <!-- VLC-Randomizer -->
			        <hr>
			        <div class="experiences">
			            <div class="experience row">
			                <div class="col-md-4">
			                    <h4><a href="https://github.com/MartinBarker/VLC-Playlist-Randomizer">VLC-Playlist-Randomizer</a>
			                    </h4>
			                    <p class="experience-period">
			                        <ul>
			                            <li>Python 3</li>
			                            <li>PyPi Package</li>
			                            <li>Command Line Interface</li>
			                            <li>VLC Media Player</li>
			                        </ul>
			                    </p>
			                </div>
			                <div class="col-md-8">
			                    <p>
			                        <span class="hidden-phone">
			                            A Python program to randomize a VLC playlist .xspf file. VLC's built in random-feature jumps
			                            around and doesn't shuffle all too well. I built this script so I could generate unique
			                            playlists for large amounts of songs to play with my VLC-Radio project.
			                        </span>
			                        <br> <a href="https://github.com/MartinBarker/VLC-Playlist-Randomizer">Github</a>
			                    </p>
			                </div>
			            </div>
			        </div>

			        <h4><a href="http://martinbarker.me/projects">More</a></h4>


			    </div>
			</body>

        </main>

</div>